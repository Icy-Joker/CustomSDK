#pragma once

#ifndef __TEMPLATE_PROJECT_H__
# define __TEMPLATE_PROJECT_H__

const char* TEMPLATE_PROJECT_VERSION_INFO_RESOURCE =
"1 VERSIONINFO\n"
"\n"
"FILEVERSION ${PROJECT_VERSION_MAJOR},${PROJECT_VERSION_MINOR},${PROJECT_VERSION_PATCH}\n"
"PRODUCTVERSION ${PROJECT_VERSION_MAJOR},${PROJECT_VERSION_MINOR},${PROJECT_VERSION_PATCH}\n"
"FILEFLAGSMASK 0x17L\n"
"\n"
"#ifdef _DEBUG\n"
"  FILEFLAGS 0x1L\n"
"#else\n"
"  FILEFLAGS 0x0L\n"
"#endif\n"
"  FILEOS 0x4L\n"
"  FILETYPE 0x0L\n"
"  FILESUBTYPE 0x0L\n"
"  \n"
"BEGIN\n"
"  BLOCK \"StringFileInfo\"\n"
"  BEGIN\n"
"    BLOCK \"040904b0\"\n"
"    BEGIN\n"
"      VALUE \"FileDescription\",\"${CURRENT_TARGET}\"\n"
"      VALUE \"FileVersion\",\"${PROJECT_VERSION}\"\n"
"      VALUE \"InternalName\",\"${CURRENT_TARGET}\"\n"
"      VALUE \"CompanyName\",\"You Guess\"\n"
"      VALUE \"LegalCopyright\",\"Copyright (C) ${CURRENT_YEAR}\"\n"
"      VALUE \"OriginalFilename\",\" \"\n"
"      VALUE \"ProductName\",\"${CMAKE_PROJECT_DESCRIPTION}\"\n"
"      VALUE \"ProductVersion\",\"${CMAKE_PROJECT_VERSION}\"\n"
"    END\n"
"  END\n"
"  BLOCK \"VarFileInfo\"\n"
"  BEGIN\n"
"    VALUE \"Translation\",0x00,0\n"
"  END\n"
"END\n"
"";

const char* TEMPLATE_PROJECT_CMAKE_MODULE =
"if(${CMAKE_VERSION} VERSION_GREATER 3.8.2 OR ${CMAKE_VERSION} VERSION_EQUAL 3.8.2)#此模块要求CMake版本至少3.8.2\n"
"  if(${CMAKE_VERSION} VERSION_GREATER 3.9 OR ${CMAKE_VERSION} VERSION_EQUAL 3.9)#\n"
"    cmake_policy(SET CMP0068 NEW)\n"
"  endif()\n"
"  if(${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})#编译环境与目标配置初始化\n"
"    set(CMAKE_WARN_VS10 OFF CACHE BOOL \"CMAKE_WARN_VS10\")#忽略将不支持VS2010的警告\n"
"\n"
"    set(CMAKE_C_STANDARD \"11\")#设置语言标准要求\"C11\"\n"
"    set(CMAKE_CXX_STANDARD \"11\")#设置语言标准要求\"C++11\"\n"
"\n"
"    set(CMAKE_C_STANDARD_REQUIRED \"ON\")#设置语言标准要求必须满足\n"
"    set(CMAKE_CXX_STANDARD_REQUIRED \"ON\")#设置语言标准要求必须满足\n"
"\n"
"    set(CMAKE_POSITION_INDEPENDENT_CODE \"TRUE\")#生成位置无关代码\n"
"    set(CMAKE_ENABLE_EXPORTS \"TRUE\")\n"
"\n"
"    #设置编译配置(VS支持多配置)\n"
"    if(NOT CMAKE_CONFIGURATION_TYPES)\n"
"      if(NOT CMAKE_BUILD_TYPE)\n"
"        set(CMAKE_BUILD_TYPE \"Release\" CACHE INTERNAL \"CMAKE_BUILD_TYPE\" FORCE)\n"
"      endif()\n"
"      set(CMAKE_CONFIGURATION_TYPES \"${CMAKE_BUILD_TYPE}\" CACHE INTERNAL \"CMAKE_CONFIGURATION_TYPES\" FORCE)\n"
"    endif()\n"
"\n"
"    if(CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")#MSVC编译器\n"
"      #设置编译选项\n"
"      #${CMAKE_CXX_FLAGS_INIT}=/DWIN32 /D_WINDOWS /W3 /GR /EHsc\n"
"      #${CMAKE_CXX_FLAGS_DEBUG_INIT}=/MDd /Zi /Ob0 /Od /RTC1\n"
"      #${CMAKE_CXX_FLAGS_RELEASE_INIT}=/MD /O2 /Ob2 /DNDEBUG\n"
"      #${CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT}=/MD /Zi /O2 /Ob1 /DNDEBUG\n"
"\n"
"      #多处理器编译\n"
"      add_compile_options(/MP)\n"
"      #忽略特定警告\n"
"      add_compile_options(/wd4482)#忽略警告[C4482: 使用了非标准扩展: 限定名中使用了枚举]\n"
"      add_compile_options(/wd4996)#忽略警告[C4996: 使用了不安全的函数]                              #sprintf等函数不安全,此警告用于提示其安全版本(_s)\n"
"      add_compile_options(/wd4251)#忽略警告[C4251: ]\n"
"      add_compile_options(/wd4819)#忽略警告[C4819: 该文件包含不能在当前代码页表示的字符,请将其保存为Unicode格式以防止数据丢失]\n"
"      add_compile_options(/wd4099)#忽略警告[C4099: 正在链接对象,如同没有调试信息一样]               #开启调试的情况下,没有找到链接库的PDB文件\n"
"      #将特定警告视为错误\n"
"      add_compile_options(/we4715)#警告视为错误[C4715: 不是所有的控件路径都返回值]                  #有时错误分支返回在优化开启的情况下会出现未知情况\n"
"\n"
"      #确定C/C++运行时库版本\n"
"      if(NOT DEFINED MSVC_TOOLSET_VERSION)\n"
"        if(MSVC_VERSION LESS 1400)\n"
"          message(FATAL_ERROR \"Unsupported MSVC_VERSION:${MSVC_VERSION}\")\n"
"        elseif(CMAKE_GENERATOR MATCHES \"2005\")\n"
"          set(MSVC_TOOLSET_VERSION \"80\" CACHE STRING \"MSVC_TOOLSET_VERSION\")\n"
"        elseif(CMAKE_GENERATOR MATCHES \"2008\")\n"
"          set(MSVC_TOOLSET_VERSION \"90\" CACHE STRING \"MSVC_TOOLSET_VERSION\")\n"
"        elseif(CMAKE_GENERATOR MATCHES \"2010\")\n"
"          set(MSVC_TOOLSET_VERSION \"100\" CACHE STRING \"MSVC_TOOLSET_VERSION\")\n"
"        elseif(CMAKE_GENERATOR MATCHES \"2012\")\n"
"          set(MSVC_TOOLSET_VERSION \"110\" CACHE STRING \"MSVC_TOOLSET_VERSION\")\n"
"        elseif(CMAKE_GENERATOR MATCHES \"2013\")\n"
"          set(MSVC_TOOLSET_VERSION \"120\" CACHE STRING \"MSVC_TOOLSET_VERSION\")\n"
"        elseif(CMAKE_GENERATOR MATCHES \"2015\")\n"
"          set(MSVC_TOOLSET_VERSION \"140\" CACHE STRING \"MSVC_TOOLSET_VERSION\")\n"
"        elseif(CMAKE_GENERATOR MATCHES \"2017\")\n"
"          set(MSVC_TOOLSET_VERSION \"141\" CACHE STRING \"MSVC_TOOLSET_VERSION\")\n"
"        elseif(CMAKE_GENERATOR MATCHES \"2019\")\n"
"          set(MSVC_TOOLSET_VERSION \"142\" CACHE STRING \"MSVC_TOOLSET_VERSION\")\n"
"        elseif(CMAKE_GENERATOR MATCHES \"2022\")\n"
"          set(MSVC_TOOLSET_VERSION \"143\" CACHE STRING \"MSVC_TOOLSET_VERSION\")\n"
"        endif()\n"
"      endif()\n"
"      #高于vc140的默认按vc140兼容\n"
"      if(MSVC_TOOLSET_VERSION GREATER 140)\n"
"        set(MSVC_TOOLSET_VERSION \"140\" CACHE STRING \"MSVC_TOOLSET_VERSION\")\n"
"      endif()\n"
"      set(CRT_VERSION_NAME \"vc${MSVC_TOOLSET_VERSION}\" CACHE STRING \"CRT_VERSION_NAME\")\n"
"\n"
"      #确定处理器架构\n"
"      if(CMAKE_CL_64)\n"
"        set(PLATFORM \"x64\" CACHE STRING \"PLATFORM\")\n"
"      else()\n"
"        set(PLATFORM \"x32\" CACHE STRING \"PLATFORM\")\n"
"      endif()\n"
"\n"
"      #库文件调试后缀\n"
"      set(CMAKE_DEBUG_POSTFIX \"_d\" CACHE STRING \"CMAKE_DEBUG_POSTFIX\" FORCE)\n"
"      #库文件编译信息\n"
"      set(DEFAULT_VERSION_INFORMATION \"-${CRT_VERSION_NAME}-${PLATFORM}\" CACHE STRING \"DEFAULT_VERSION_INFORMATION\" FORCE)\n"
"\n"
"      set(SYMBOL_SEARCH_LIBRARY \" /LIBPATH:\")\n"
"    else()#类Unix平台\n"
"      #确定C/C++运行时库版本\n"
"      set(CRT_VERSION_NAME \"${CMAKE_CXX_COMPILER_ID}\" CACHE STRING \"CRT_VERSION_NAME\")\n"
"      #确定处理器架构\n"
"      set(PLATFORM \"${CMAKE_SYSTEM_PROCESSOR}\" CACHE STRING \"PLATFORM\")\n"
"      #配置运行时库加载路径\n"
"      set(CMAKE_BUILD_WITH_INSTALL_RPATH \"TRUE\")\n"
"      #set(CMAKE_INSTALL_RPATH_USE_LINK_PATH \"TRUE\")\n"
"      #set(CMAKE_SKIP_BUILD_RPATH TRUE)\n"
"      #set(CMAKE_SKIP_INSTALL_RPATH TRUE)\n"
"      set(CMAKE_INSTALL_RPATH \".;../lib/${CRT_VERSION_NAME}_${PLATFORM};../lib;../thirdparty/Qt/lib;./lib/${CRT_VERSION_NAME}_${PLATFORM};./lib;./thirdparty;\")\n"
"#\n"
"      if(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n"
"        if(CMAKE_SYSTEM_PROCESSOR MATCHES \"mips64\")\n"
"          set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -rdynamic -static-libgcc -mxgot\")\n"
"        else()\n"
"          set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -rdynamic -static-libgcc -static-libstdc++\")\n"
"        endif()\n"
"      elseif(CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\")\n"
"      endif()\n"
"\n"
"      set(SYMBOL_SEARCH_LIBRARY \" -L\")\n"
"    endif()\n"
"\n"
"    #可执行程序输出目录\n"
"    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\" CACHE PATH \"CMAKE_RUNTIME_OUTPUT_DIRECTORY\")\n"
"    #动态库输出目录\n"
"    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\" CACHE PATH \"CMAKE_LIBRARY_OUTPUT_DIRECTORY\")\n"
"    #静态库输出目录\n"
"    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib\" CACHE PATH \"CMAKE_ARCHIVE_OUTPUT_DIRECTORY\")\n"
"    #程序数据库文件\n"
"    set(CMAKE_PDB_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/pdb\" CACHE PATH \"CMAKE_PDB_OUTPUT_DIRECTORY\")\n"
"    #Java\n"
"    set(CMAKE_JAVA_TARGET_OUTPUT_DIR \"${CMAKE_BINARY_DIR}/bin\" CACHE PATH \"CMAKE_JAVA_TARGET_OUTPUT_DIR\")\n"
"\n"
"    #允许使用自定义目录\n"
"    set_property(GLOBAL PROPERTY USE_FOLDERS ON)\n"
"\n"
"    #设置CMake预定义文件夹名称\n"
"    set(PREDEFINED_TARGETS_FOLDER \"_CMakePredefinedTargets\")\n"
"    set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER ${PREDEFINED_TARGETS_FOLDER})\n"
"\n"
"    #\n"
"    if(${CMAKE_VERSION} VERSION_GREATER 3.9 OR ${CMAKE_VERSION} VERSION_EQUAL 3.9)\n"
"      set_property(GLOBAL PROPERTY AUTOGEN_SOURCE_GROUP \"Moc Files\")#\n"
"    endif()\n"
"\n"
"    #若未设置安装目录,则自定义安装路径\n"
"    if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n"
"      #获取工程根目录\n"
"      get_filename_component(ROOT_DIRECTORY ${CMAKE_SOURCE_DIR} DIRECTORY CACHE)\n"
"      get_filename_component(CMAKE_INSTALL_PREFIX_DEFAULT ${ROOT_DIRECTORY} DIRECTORY CACHE)\n"
"      set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX_DEFAULT} CACHE INTERNAL \"CMAKE_INSTALL_PREFIX\" FORCE)\n"
"    endif()\n"
"\n"
"    #Qt环境初始化\n"
"    if(DEFINED ENV{QTDIR})\n"
"      #设置Qt模块搜索路径\n"
"      set(CMAKE_PREFIX_PATH \"$ENV{QTDIR}\")\n"
"      #设置此行才能成功找到Qt4\n"
"      set(QT_BINARY_DIR \"$ENV{QTDIR}/bin\" CACHE PATH \"QT_BINARY_DIR\" FORCE)\n"
"      #\n"
"      set(QT_MKSPECS_DIR \"$ENV{QTDIR}/mkspecs\" CACHE PATH \"QT_MKSPECS_DIR\" FORCE)\n"
"      #预查找Qt库,确定Qt版本\n"
"      find_package(Qt6 QUIET COMPONENTS \"Core\" OPTIONAL_COMPONENTS \"Gui;Widgets\")\n"
"      if(NOT Qt6_FOUND)\n"
"        find_package(Qt5 QUIET COMPONENTS \"Core\" OPTIONAL_COMPONENTS \"Gui;Widgets\")\n"
"        if(NOT Qt5_FOUND)\n"
"          find_package(Qt4 QUIET)\n"
"        endif()\n"
"      endif()\n"
"    endif()\n"
"\n"
"    include(CheckLanguage)\n"
"\n"
"    #Java环境初始化\n"
"    find_package(Java)\n"
"    if(Java_FOUND)\n"
"      #Java编译指定为utf8编码,防止源码文件编码格式不符导致编译报错\n"
"      list(APPEND CMAKE_JAVA_COMPILE_FLAGS \"-encoding\" \"utf8\")\n"
"      include(UseJava)\n"
"    endif()\n"
"\n"
"    #CSharp环境初始化\n"
"    if(${CMAKE_VERSION} VERSION_GREATER 3.8.2 OR ${CMAKE_VERSION} VERSION_EQUAL 3.8.2)\n"
"      check_language(\"CSharp\")\n"
"      if(CMAKE_CSharp_COMPILER)\n"
"        enable_language(\"CSharp\")\n"
"        include(CSharpUtilities)\n"
"\n"
"        set(CMAKE_CSharp_FLAGS \"/langversion:default /errorreport:prompt\")\n"
"        set(CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION \"v4.0\" CACHE STRING \"CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION\")\n"
"      endif()\n"
"    endif()\n"
"\n"
"    #输出编译环境信息\n"
"    message(\"\")\n"
"    message(\"************************************************************************************************************************\")\n"
"    #平台信息\n"
"    message(STATUS \"CMAKE_GENERATOR:${CMAKE_GENERATOR}\")\n"
"    message(STATUS \"CRT_VERSION_NAME:${CRT_VERSION_NAME}\")\n"
"    message(STATUS \"PLATFORM:${PLATFORM}\")\n"
"    message(\"************************************************************************************************************************\")\n"
"    #环境变量\n"
"    message(STATUS \"ThirdParty:$ENV{ThirdParty}\")\n"
"    message(STATUS \"QTDIR:$ENV{QTDIR}\")\n"
"    message(\"************************************************************************************************************************\")\n"
"    #默认输出目录\n"
"    message(STATUS \"CMAKE_CONFIGURATION_TYPES:${CMAKE_CONFIGURATION_TYPES}\")\n"
"    message(STATUS \"CMAKE_RUNTIME_OUTPUT_DIRECTORY:${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")\n"
"    message(STATUS \"CMAKE_LIBRARY_OUTPUT_DIRECTORY:${CMAKE_LIBRARY_OUTPUT_DIRECTORY}\")\n"
"    message(STATUS \"CMAKE_ARCHIVE_OUTPUT_DIRECTORY:${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}\")\n"
"    message(STATUS \"CMAKE_PDB_OUTPUT_DIRECTORY:${CMAKE_PDB_OUTPUT_DIRECTORY}\")\n"
"    message(\"************************************************************************************************************************\")\n"
"    #默认Java输出目录\n"
"    message(STATUS \"CMAKE_JAVA_TARGET_OUTPUT_DIR:${CMAKE_JAVA_TARGET_OUTPUT_DIR}\")\n"
"    message(\"************************************************************************************************************************\")\n"
"    #安装目录\n"
"    message(STATUS \"CMAKE_INSTALL_PREFIX:${CMAKE_INSTALL_PREFIX}\")\n"
"    message(\"************************************************************************************************************************\")\n"
"    message(\"\")\n"
"  endif()\n"
"else()\n"
"  message(FATAL_ERROR \"CURRENT CMAKE_VERSION: (${CMAKE_VERSION}) VERSION_REQUIRED: (3.8.2) OR HIGHER\")\n"
"endif()\n"
"\n"
"#配置Qt库\n"
"macro(configureQtModules)\n"
"  if(DEFINED QT_MODULE_LIST)\n"
"    if(DEFINED ENV{QTDIR})\n"
"      #设置VS中环境变量\n"
"      set_property(TARGET ${CURRENT_TARGET} PROPERTY VS_GLOBAL_QTDIR \"$ENV{QTDIR}\")#$(QTDIR)=\"$ENV{QTDIR}\"\n"
"      set_property(TARGET ${CURRENT_TARGET} PROPERTY VS_GLOBAL_QT_BINARY_DIR \"${QT_BINARY_DIR}\")#$(QT_BINARY_DIR)=\"${QT_BINARY_DIR}\"\n"
"      set_property(TARGET ${CURRENT_TARGET} PROPERTY VS_GLOBAL_QT_MKSPECS_DIR \"${QT_MKSPECS_DIR}\")#$(QT_MKSPECS_DIR)=\"${QT_MKSPECS_DIR}\"\n"
"      #Qt项目预处理\n"
"      set_property(TARGET ${CURRENT_TARGET} PROPERTY AUTOMOC ON)#自动处理自定义Qt类\n"
"      set_property(TARGET ${CURRENT_TARGET} PROPERTY AUTOUIC ON)#自动处理自定义Qt界面\n"
"      set_property(TARGET ${CURRENT_TARGET} PROPERTY AUTORCC ON)#自动处理自定义Qt资源\n"
"      #判断是否存在UI界面\n"
"      list(FIND QT_MODULE_LIST \"Widgets\" INDEX_WIDGETS)\n"
"      if(INDEX_WIDGETS GREATER \"-1\")#包含GUI\n"
"        set(USE_GUI ON)\n"
"      endif()\n"
"      if(Qt6_FOUND)#使用Qt6\n"
"        find_package(Qt6 QUIET REQUIRED COMPONENTS ${QT_MODULE_LIST})\n"
"        set(QT_MODULE_PREFIX \"Qt6::\")\n"
"      elseif(Qt5_FOUND)#使用Qt5\n"
"        find_package(Qt5 QUIET REQUIRED COMPONENTS ${QT_MODULE_LIST})\n"
"        list(REMOVE_ITEM QT_MODULE_LIST \"Core5Compat\")#这些模块在Qt5中没有独立存在\n"
"        set(QT_MODULE_PREFIX \"Qt5::\")\n"
"      elseif(Qt4_FOUND OR QT4_FOUND)#使用Qt4\n"
"        list(REMOVE_ITEM QT_MODULE_LIST \"Widgets\" \"PrintSupport\" \"Concurrent\" \"Core5Compat\")#这些模块在Qt4中没有独立存在\n"
"        set(QT_MODULE_PREFIX \"Qt4::Qt\")\n"
"      endif()\n"
"      if(DEFINED QT_MODULE_PREFIX)#成功找到版本合适的Qt库\n"
"        message(\"\\tQT_MODULE_LIST:${QT_MODULE_LIST}\")#输出实际导入的Qt模块列表\n"
"        foreach(CURRENT_MODULE_NAME ${QT_MODULE_LIST})\n"
"          if(TARGET \"${QT_MODULE_PREFIX}${CURRENT_MODULE_NAME}\")\n"
"            target_link_libraries(${CURRENT_TARGET} PRIVATE \"${QT_MODULE_PREFIX}${CURRENT_MODULE_NAME}\") #导入Qt公共库/模块依赖\n"
"            if(TARGET \"${QT_MODULE_PREFIX}${CURRENT_MODULE_NAME}Private\")\n"
"              target_link_libraries(${CURRENT_TARGET} PRIVATE \"${QT_MODULE_PREFIX}${CURRENT_MODULE_NAME}Private\")#导入Qt私有库/模块依赖\n"
"            endif()\n"
"          else()\n"
"            message(FATAL_ERROR \"QtModule[${CURRENT_MODULE_NAME}] not found\")\n"
"          endif()\n"
"        endforeach()\n"
"      else()\n"
"        message(FATAL_ERROR \"UNKNOWN QT_VERSION\")\n"
"      endif()\n"
"    else()\n"
"      message(FATAL_ERROR \"QTDIR not found for loading QT_MODULE_LIST\")\n"
"    endif()\n"
"  endif()\n"
"endmacro()\n"
"\n"
"#配置三方库\n"
"macro(configureThirdPartyList)\n"
"  if(DEFINED THIRD_LIBRARY_LIST )\n"
"    if(DEFINED ENV{ThirdParty})\n"
"      set_property(TARGET ${CURRENT_TARGET} PROPERTY VS_GLOBAL_ThirdParty \"$ENV{ThirdParty}\")#设置VS中环境变量:$(ThirdParty)=$ENV{ThirdParty}\n"
"      message(\"\\tTHIRD_LIBRARY_LIST:${THIRD_LIBRARY_LIST}\")#输出三方库列表\n"
"      foreach(CURRENT_LIBRARY_NAME ${THIRD_LIBRARY_LIST})\n"
"        #添加三方库搜索路径\n"
"        set(CURRENT_LIBRARY_ROOT \"\")\n"
"        if(CMAKE_SYSTEM_NAME MATCHES \"Linux\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\")\n"
"          #设置当前库的根路径\n"
"          if(${CURRENT_LIBRARY_NAME} STREQUAL \"soci\")\n"
"            set(CURRENT_LIBRARY_ROOT \"$ENV{ThirdParty}/soci-3.2.3\")\n"
"          else()\n"
"            set(CURRENT_LIBRARY_ROOT \"$ENV{ThirdParty}/${CURRENT_LIBRARY_NAME}\")\n"
"          endif()\n"
"          #添加头文件和静态库搜索路径\n"
"          target_include_directories(${CURRENT_TARGET} SYSTEM PRIVATE \"${CURRENT_LIBRARY_ROOT}/include\")\n"
"          set_property(TARGET ${CURRENT_TARGET} APPEND_STRING PROPERTY LINK_FLAGS \"${SYMBOL_SEARCH_LIBRARY}${CURRENT_LIBRARY_ROOT}/lib\")\n"
"          #链接静态库\n"
"          if(${CURRENT_LIBRARY_NAME} MATCHES \"boost\")\n"
"            target_link_libraries(${CURRENT_TARGET} PRIVATE \"boost_thread;boost_system;boost_filesystem;boost_date_time;boost_program_options;boost_regex;boost_atomic;boost_chrono;\")\n"
"          elseif(${CURRENT_LIBRARY_NAME} MATCHES \"Qtnribbon\")\n"
"            target_link_libraries(${CURRENT_TARGET} PRIVATE \"qtnribbon\")\n"
"          elseif(${CURRENT_LIBRARY_NAME} MATCHES \"tbb\")\n"
"             target_link_libraries(${CURRENT_TARGET} PRIVATE \"tbb;tbbmalloc;tbbmalloc_proxy;\")\n"
"          elseif(${CURRENT_LIBRARY_NAME} MATCHES \"soci\")\n"
"            target_link_libraries(${CURRENT_TARGET} PRIVATE \"soci_core\")\n"
"          elseif(${CURRENT_LIBRARY_NAME} MATCHES \"iconv\")\n"
"            target_link_libraries(${CURRENT_TARGET} PRIVATE \"iconv\")\n"
"          elseif(${CURRENT_LIBRARY_NAME} MATCHES \"sqlite3\")\n"
"            target_link_libraries(${CURRENT_TARGET} PRIVATE \"sqlite3\")\n"
"          elseif(${CURRENT_LIBRARY_NAME} MATCHES \"pcap\")\n"
"            target_link_libraries(${CURRENT_TARGET} PRIVATE \"pcap\")\n"
"          elseif(${CURRENT_LIBRARY_NAME} MATCHES \"gtest\")\n"
"            target_link_libraries(${CURRENT_TARGET} PRIVATE \"gtest\")\n"
"          endif()\n"
"        elseif(CMAKE_SYSTEM_NAME MATCHES \"Windows\")\n"
"          #设置当前库的根路径\n"
"          if(${CURRENT_LIBRARY_NAME} STREQUAL \"boost\" AND ${CRT_VERSION_NAME} MATCHES \"vc100\")\n"
"            set(CURRENT_LIBRARY_ROOT \"$ENV{ThirdParty}/boost_1.56\")\n"
"          elseif(${CURRENT_LIBRARY_NAME} STREQUAL \"qwt\" AND ${CRT_VERSION_NAME} MATCHES \"vc100\")\n"
"            set(CURRENT_LIBRARY_ROOT \"$ENV{ThirdParty}/qwt-6.0.1\")\n"
"          elseif(${CURRENT_LIBRARY_NAME} STREQUAL \"soci\")\n"
"            set(CURRENT_LIBRARY_ROOT \"$ENV{ThirdParty}/soci-3.2.3\")\n"
"          else()\n"
"           set(CURRENT_LIBRARY_ROOT \"$ENV{ThirdParty}/${CURRENT_LIBRARY_NAME}\")\n"
"          endif()\n"
"          #添加头文件和静态库搜索路径\n"
"          target_include_directories(${CURRENT_TARGET} SYSTEM PRIVATE ${CURRENT_LIBRARY_ROOT}/include)\n"
"          if(EXISTS \"${CURRENT_LIBRARY_ROOT}/lib/${CRT_VERSION_NAME}/${PLATFORM}\")\n"
"            set_property(TARGET ${CURRENT_TARGET} APPEND_STRING PROPERTY LINK_FLAGS \"${SYMBOL_SEARCH_LIBRARY}${CURRENT_LIBRARY_ROOT}/lib/${CRT_VERSION_NAME}/${PLATFORM}\")\n"
"            set_property(TARGET ${CURRENT_TARGET} APPEND_STRING PROPERTY LINK_FLAGS \"${SYMBOL_SEARCH_LIBRARY}${CURRENT_LIBRARY_ROOT}/lib/${CRT_VERSION_NAME}/${PLATFORM}/${CMAKE_CFG_INTDIR}\")\n"
"            set_property(TARGET ${CURRENT_TARGET} APPEND_STRING PROPERTY LINK_FLAGS_RELWITHDEBINFO \"${SYMBOL_SEARCH_LIBRARY}${CURRENT_LIBRARY_ROOT}/lib/${CRT_VERSION_NAME}/${PLATFORM}/Release\")\n"
"          elseif(EXISTS \"${CURRENT_LIBRARY_ROOT}/lib\")\n"
"            set_property(TARGET ${CURRENT_TARGET} APPEND_STRING PROPERTY LINK_FLAGS \"${SYMBOL_SEARCH_LIBRARY}${CURRENT_LIBRARY_ROOT}/lib\")\n"
"            set_property(TARGET ${CURRENT_TARGET} APPEND_STRING PROPERTY LINK_FLAGS \"${SYMBOL_SEARCH_LIBRARY}${CURRENT_LIBRARY_ROOT}/lib/${CMAKE_CFG_INTDIR}\")\n"
"            set_property(TARGET ${CURRENT_TARGET} APPEND_STRING PROPERTY LINK_FLAGS_RELWITHDEBINFO \"${SYMBOL_SEARCH_LIBRARY}${CURRENT_LIBRARY_ROOT}/lib/Release\")\n"
"          endif()\n"
"          #链接静态库\n"
"          if(${CURRENT_LIBRARY_NAME} MATCHES \"Qtnribbon\")\n"
"            target_link_libraries(${CURRENT_TARGET} PRIVATE debug \"qtnribbond3\" optimized \"qtnribbon3\")\n"
"          elseif(${CURRENT_LIBRARY_NAME} MATCHES \"qwt\")\n"
"            target_link_libraries(${CURRENT_TARGET} PRIVATE debug \"qwtd\" optimized \"qwt\")\n"
"          elseif(${CURRENT_LIBRARY_NAME} MATCHES \"gtest\" AND ${CRT_VERSION_NAME} MATCHES \"vc140\")\n"
"            target_link_libraries(${CURRENT_TARGET} PRIVATE debug \"gtestd\" optimized \"gtest\")\n"
"          elseif(${CURRENT_LIBRARY_NAME} MATCHES \"lua53\" AND ${CRT_VERSION_NAME} MATCHES \"vc140\")\n"
"            target_link_libraries(${CURRENT_TARGET} PRIVATE \"lua53\")\n"
"          elseif(${CURRENT_LIBRARY_NAME} MATCHES \"sqlite3\")\n"
"            #target_link_libraries(${CURRENT_TARGET} PRIVATE \"sqlite3\")\n"
"          elseif(${CURRENT_LIBRARY_NAME} MATCHES \"soci\")\n"
"            target_link_libraries(${CURRENT_TARGET} PRIVATE debug \"soci_core_3_2d;soci_sqlite3_3_2d\" optimized \"soci_core_3_2;soci_sqlite3_3_2\")\n"
"          elseif(${CURRENT_LIBRARY_NAME} MATCHES \"libcef\")\n"
"            target_link_libraries(${CURRENT_TARGET} PRIVATE \"libcef;libcef_dll_wrapper\")\n"
"          elseif(${CURRENT_LIBRARY_NAME} MATCHES \"pcap\")\n"
"            target_link_libraries(${CURRENT_TARGET} PRIVATE \"wpcap\")\n"
"          elseif(${CURRENT_LIBRARY_NAME} MATCHES \"tbb\")\n"
"            target_link_libraries(${CURRENT_TARGET} PRIVATE debug \"tbb_debug;tbbmalloc_debug;tbbmalloc_proxy_debug\" optimized \"tbb;tbbmalloc;tbbmalloc_proxy\")\n"
"          endif()\n"
"        endif()\n"
"      endforeach()\n"
"    else()\n"
"      message(FATAL_ERROR \"ThirdParty not found for loading THIRD_LIBRARY_LIST\")\n"
"    endif()\n"
"  endif()\n"
"endmacro()\n"
"\n"
"#配置华如授权限制\n"
"macro(configureHuaruLicense)\n"
"  set(LICENSE_MESSAGE)\n"
"  if(NOT DEFINED LICENSE_PRODUCT_ID)\n"
"    if(DEFINED ENV{BUILD_XSIM_PRODUCT})#XSimStudio\n"
"      if(CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n"
"        set(LICENSE_PRODUCT_ID \"2003\")\n"
"      elseif(CMAKE_SYSTEM_NAME MATCHES \"Windows\")\n"
"        set(LICENSE_PRODUCT_ID \"2002\")\n"
"      endif()\n"
"      list(APPEND LICENSE_MESSAGE \"BUILD_XSIM_PRODUCT:LICENSE_PRODUCT_ID=${LICENSE_PRODUCT_ID}\\t\")\n"
"    elseif(DEFINED ENV{BUILD_LINK_PRODUCT})#XSimLink\n"
"      if(CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n"
"        set(LICENSE_PRODUCT_ID \"1001\")\n"
"      elseif(CMAKE_SYSTEM_NAME MATCHES \"Windows\")\n"
"        set(LICENSE_PRODUCT_ID \"1000\")\n"
"      endif()\n"
"      list(APPEND LICENSE_MESSAGE \"BUILD_LINK_PRODUCT:LICENSE_PRODUCT_ID=${LICENSE_PRODUCT_ID}\\t\")\n"
"    endif()\n"
"  else()\n"
"    list(APPEND LICENSE_MESSAGE \"LICENSE_PRODUCT_ID=${LICENSE_PRODUCT_ID}\\t\")\n"
"  endif()\n"
"  if(DEFINED ENV{WITHOUT_LICENSE})\n"
"    target_compile_definitions(${CURRENT_TARGET} PRIVATE \"WITHOUT_LICENSE\")\n"
"    message(\"\\t${LICENSE_MESSAGE}WITHOUT_LICENSE\")\n"
"  else()\n"
"    target_compile_definitions(${CURRENT_TARGET} PRIVATE \"LICENSE_PRODUCT_ID=${LICENSE_PRODUCT_ID}\")\n"
"    message(\"\\t${LICENSE_MESSAGE}LICENSE_REQUIRED\")\n"
"  endif()\n"
"endmacro()\n"
"\n"
"#从$ENV{SecondParty}导入公司内部其他项目的动态库(二方库)      用于依赖指定版本的SDK进行编译\n"
"macro(importTarget IMPORTED_TARGET_NAME)\n"
" if(NOT TARGET \"${IMPORTED_TARGET_NAME}\")\n"
"    if(DEFINED ENV{SecondParty})\n"
"      if(EXISTS \"$ENV{SecondParty}/include/${IMPORTED_TARGET_NAME}\")#依赖已存在的指定版本的库\n"
"        message(STATUS \"TARGET:${IMPORTED_TARGET_NAME}\\t IMPORTED\")\n"
"        add_library(${IMPORTED_TARGET_NAME} SHARED IMPORTED)\n"
"        set_property(TARGET \"${IMPORTED_TARGET_NAME}\" PROPERTY IMPORTED_CONFIGURATIONS \"${CMAKE_CONFIGURATION_TYPES}\")\n"
"        set_property(TARGET \"${IMPORTED_TARGET_NAME}\" PROPERTY INTERFACE_INCLUDE_DIRECTORIES \"$ENV{SecondParty}/include\")\n"
"        foreach(CONFIG_TYPE ${CMAKE_CONFIGURATION_TYPES})\n"
"          string(TOUPPER ${CONFIG_TYPE} CONFIG_TYPE_UPPER_CASE)\n"
"          set(IMPORTED_TARGET_BASE_NAME \"${IMPORTED_TARGET_NAME}${DEFAULT_VERSION_INFORMATION}${CMAKE_${CONFIG_TYPE_UPPER_CASE}_POSTFIX}\")\n"
"          #查找静态库\n"
"          if(MSVC)\n"
"            set(IMPORTED_TARGET_IMPLIB \"${IMPORTED_TARGET_NAME}_IMPLIB_${CONFIG_TYPE_UPPER_CASE}\")#静态库路径\n"
"            set(${IMPORTED_TARGET_IMPLIB} \"${IMPORTED_TARGET_BASE_NAME}-NOTFOUND\" CACHE STRING \"${IMPORTED_TARGET_IMPLIB}\" FORCE)#清除之前找到的二方库路径缓存\n"
"            find_library(${IMPORTED_TARGET_IMPLIB} \"${CMAKE_FIND_LIBRARY_PREFIXES}${IMPORTED_TARGET_BASE_NAME}${CMAKE_FIND_LIBRARY_SUFFIX}\"\n"
"              HINTS \"$ENV{SecondParty}/lib\"\n"
"              PATH_SUFFIXES \"${CRT_VERSION_NAME}_${PLATFORM}\" \"${PLATFORM}\" \"${CRT_VERSION_NAME}/${PLATFORM}\" \"${CRT_VERSION_NAME}_${PLATFORM}/static\" \"${PLATFORM}/static\" \"${CRT_VERSION_NAME}/${PLATFORM}/static\"\n"
"              NO_DEFAULT_PATH)\n"
"            if(NOT ${${IMPORTED_TARGET_IMPLIB}} STREQUAL \"${IMPORTED_TARGET_IMPLIB}-NOTFOUND\")\n"
"              set_property(TARGET \"${IMPORTED_TARGET_NAME}\" PROPERTY IMPORTED_IMPLIB_${CONFIG_TYPE_UPPER_CASE} \"${${IMPORTED_TARGET_IMPLIB}}\")\n"
"              install(FILES \"$<TARGET_LINKER_FILE:${IMPORTED_TARGET_NAME}>\" DESTINATION \"lib/${CRT_VERSION_NAME}_${PLATFORM}\" CONFIGURATIONS \"${CONFIG_TYPE}\")#\n"
"              message(\"\\tLINK_FOR_${CONFIG_TYPE_UPPER_CASE}:${${IMPORTED_TARGET_IMPLIB}}\")\n"
"            else()\n"
"              message(\"\\tLINK_FOR_${CONFIG_TYPE_UPPER_CASE}:NOTFOUND\")\n"
"            endif()\n"
"          endif()\n"
"            #查找动态库\n"
"            set(IMPORTED_TARGET_LOCATION \"${IMPORTED_TARGET_NAME}_LOCATION_${CONFIG_TYPE_UPPER_CASE}\")#动态库路径\n"
"            set(${IMPORTED_TARGET_LOCATION} \"${IMPORTED_TARGET_BASE_NAME}-NOTFOUND\" CACHE STRING \"${IMPORTED_TARGET_LOCATION}\" FORCE)#清除之前找到的二方库路径缓存\n"
"            find_file(${IMPORTED_TARGET_LOCATION} \"${CMAKE_FIND_LIBRARY_PREFIXES}${IMPORTED_TARGET_BASE_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX}\"\n"
"              HINTS \"$ENV{SecondParty}\"\n"
"              PATH_SUFFIXES \"bin\" \"lib\" \"lib/${CRT_VERSION_NAME}_${PLATFORM}\" \"lib/${PLATFORM}\"\n"
"              NO_DEFAULT_PATH)\n"
"            if(NOT ${${IMPORTED_TARGET_LOCATION}} STREQUAL \"${IMPORTED_TARGET_LOCATION}-NOTFOUND\")\n"
"              set_property(TARGET \"${IMPORTED_TARGET_NAME}\" PROPERTY IMPORTED_LOCATION_${CONFIG_TYPE_UPPER_CASE} \"${${IMPORTED_TARGET_LOCATION}}\")\n"
"              install(FILES \"$<TARGET_FILE:${IMPORTED_TARGET_NAME}>\" DESTINATION \"bin\" CONFIGURATIONS \"${CONFIG_TYPE_UPPER_CASE}\")#\n"
"            endif()\n"
"        endforeach()\n"
"        message(\"\")\n"
"      else()\n"
"        message(FATAL_ERROR \"${IMPORTED_TARGET_NAME} not imported,libraries cannot be found\")\n"
"      endif()\n"
"    else()\n"
"      message(FATAL_ERROR \"ENV{SecondParty} not defined to import target:${IMPORTED_TARGET_NAME}\")\n"
"    endif()\n"
"  endif()\n"
"endmacro()\n"
"\n"
"#导入BasicFramework\n"
"macro(addBasicGroup)\n"
"  importTarget(\"TopSimRuntime\")\n"
"  importTarget(\"TopSimDataInterface\")\n"
"  importTarget(\"TopSimIDL\")\n"
"endmacro()\n"
"\n"
"#导入LinkStudioFramework\n"
"macro(addLinkGroup)\n"
"  addBasicGroup()\n"
"\n"
"  importTarget(\"TopSimRPC\")\n"
"  importTarget(\"TopSimDataInterfaceCWarp\")\n"
"  importTarget(\"TopSimDataInterfacePydWarp\")\n"
"endmacro()\n"
"\n"
"#导入BasicUIFramework\n"
"macro(addUIGroup)\n"
"  addBasicGroup()\n"
"\n"
"  importTarget(\"HRUtil\")\n"
"  importTarget(\"HRComModules\")\n"
"  importTarget(\"HRControls\")\n"
"  importTarget(\"HRUICommon\")\n"
"endmacro()\n"
"\n"
"#文件分类归集\n"
"macro(prepareTarget)\n"
"  get_filename_component(CURRENT_TARGET ${CMAKE_CURRENT_LIST_DIR} NAME_WE)#获取当前目标名称\n"
"  get_filename_component(CURRENT_SOURCE_FOLDER ${CMAKE_CURRENT_SOURCE_DIR} NAME_WE)#获取当前源码文件夹名称\n"
"  get_property(PARENT_DIRECTORY DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY PARENT_DIRECTORY)#获取父目录\n"
"#############################################################################################################################\n"
"  #C/C++\n"
"  file(GLOB_RECURSE SOURCE_FILES \"${CMAKE_CURRENT_SOURCE_DIR}/*.cpp\" \"${CMAKE_CURRENT_SOURCE_DIR}/*.c\" \"${CMAKE_CURRENT_SOURCE_DIR}/*.cxx\")#归集源文件\n"
"  file(GLOB_RECURSE HEADER_FILES \"${CMAKE_CURRENT_SOURCE_DIR}/*.h\" \"${CMAKE_CURRENT_SOURCE_DIR}/*.hpp\" \"${CMAKE_CURRENT_SOURCE_DIR}/*.inc\")#归集头文件\n"
"  file(GLOB_RECURSE FORM_FILES \"${CMAKE_CURRENT_SOURCE_DIR}/*.ui\")#归集界面文件\n"
"  file(GLOB_RECURSE RESOURCE_FILES \"${CMAKE_CURRENT_SOURCE_DIR}/*.rc\" \"${CMAKE_CURRENT_SOURCE_DIR}/*.qrc\")#归集资源文件\n"
"  file(GLOB_RECURSE TS_FILES \"${CMAKE_CURRENT_SOURCE_DIR}/*.ts\")#归集翻译文件\n"
"  if(MSVC AND EXISTS \"${PROJECT_SOURCE_DIR}/VersionInfo.rc.in\")\n"
"    set(CURRENT_TARGET_VERSIONINFO_RC \"${CMAKE_CURRENT_BINARY_DIR}/VersionInfo.rc\")\n"
"    string(TIMESTAMP CURRENT_YEAR \"%Y\")\n"
"    configure_file(\"${PROJECT_SOURCE_DIR}/VersionInfo.rc.in\" \"${CURRENT_TARGET_VERSIONINFO_RC}\")#将版本&版权等信息写入生成的二进制文件\n"
"    list(APPEND RESOURCE_FILES \"${CURRENT_TARGET_VERSIONINFO_RC}\")\n"
"  endif()\n"
"#############################################################################################################################\n"
"  #Java\n"
"  file(GLOB_RECURSE JAVA_SOURCE_FILES \"${CMAKE_CURRENT_SOURCE_DIR}/*.java\")#归集Java源文件\n"
"#############################################################################################################################\n"
"  #CSharp\n"
"  file(GLOB_RECURSE CSHARP_SOURCE_FILES \"${CMAKE_CURRENT_SOURCE_DIR}/*.cs\")#归集CSharp源文件\n"
"#############################################################################################################################\n"
"  #Python\n"
"  file(GLOB_RECURSE PYTHON_SOURCE_FILES \"${CMAKE_CURRENT_SOURCE_DIR}/*.py\")#归集Python源文件\n"
"#############################################################################################################################\n"
"endmacro()\n"
"\n"
"#配置目标项目\n"
"macro(configureTarget)\n"
"#############################################################################################################################\n"
"  get_property(CURRENT_TARGET_TYPE TARGET ${CURRENT_TARGET} PROPERTY TYPE)#获取目标类型\n"
"  message(STATUS \"TARGET:${CURRENT_TARGET}\\tTYPE:${CURRENT_TARGET_TYPE}\")#输出当前目标名称\n"
"  string(REPLACE \"${PROJECT_SOURCE_DIR}\" \"${CMAKE_PROJECT_NAME}\" FOLDER_PATH ${PARENT_DIRECTORY})#获取相对路径\n"
"  set_property(TARGET ${CURRENT_TARGET} PROPERTY FOLDER \"${FOLDER_PATH}\")#保持项目目录结构\n"
"#############################################################################################################################\n"
"  if(NOT CURRENT_TARGET_TYPE STREQUAL \"UTILITY\")#非Java/Python代码\n"
"#############################################################################################################################\n"
"    #公共部分代码目录\n"
"    if(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/public/include/${CURRENT_SOURCE_FOLDER}\")\n"
"      set(PUBLIC_HEADER_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/public/include\")\n"
"    elseif(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/public/${CURRENT_SOURCE_FOLDER}\")\n"
"      set(PUBLIC_HEADER_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/public\")\n"
"    else()\n"
"      set(PUBLIC_HEADER_DIR \"${PARENT_DIRECTORY}\")\n"
"    endif()\n"
"#######################################################################################################################\n"
"    #私有部分代码目录\n"
"    if(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/private/src/${CURRENT_SOURCE_FOLDER}\")\n"
"      set(PRIVATE_HEADER_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/private/src/${CURRENT_SOURCE_FOLDER}\")\n"
"    elseif(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/private/src\")\n"
"      set(PRIVATE_HEADER_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/private/src\")\n"
"    elseif(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/private\")\n"
"      set(PRIVATE_HEADER_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/private\")\n"
"    else()\n"
"      set(PRIVATE_HEADER_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\n"
"    endif()\n"
"    if(NOT CSHARP_SOURCE_FILES)#C/C++\n"
"#############################################################################################################################\n"
"      target_sources(${CURRENT_TARGET} PRIVATE ${SOURCE_FILES} ${HEADER_FILES} ${FORM_FILES} ${RESOURCE_FILES})\n"
"#######################################################################################################################\n"
"      if(NOT \"${PRIVATE_HEADER_DIR}\" STREQUAL \"${PUBLIC_HEADER_DIR}/${CURRENT_SOURCE_FOLDER}\")#经过设计的源码目录(public|private),具有较复杂的目录结构\n"
"        foreach(CURRENT_SOURCE_CODE_FILE_PATH ${HEADER_FILES} ${SOURCE_FILES} ${FORM_FILES} ${TS_FILES})\n"
"          get_filename_component(CURRENT_SOURCE_CODE_DIRECTORY ${CURRENT_SOURCE_CODE_FILE_PATH} DIRECTORY)#获取当前文件目录\n"
"          string(REPLACE \"${PRIVATE_HEADER_DIR}\" \"_Src\" CURRENT_SOURCE_CODE_FILE_GROUP \"${CURRENT_SOURCE_CODE_DIRECTORY}\")\n"
"          string(REPLACE \"${PUBLIC_HEADER_DIR}\" \"_Include\" CURRENT_SOURCE_CODE_FILE_GROUP \"${CURRENT_SOURCE_CODE_FILE_GROUP}\")\n"
"          file(TO_NATIVE_PATH \"${CURRENT_SOURCE_CODE_FILE_GROUP}\" \"CURRENT_SOURCE_CODE_FILE_GROUP\")\n"
"          source_group(\"${CURRENT_SOURCE_CODE_FILE_GROUP}\" FILES \"${CURRENT_SOURCE_CODE_FILE_PATH}\")\n"
"        endforeach()\n"
"      else()#简单目录结构\n"
"        source_group(\"_Header Files\" FILES ${HEADER_FILES})\n"
"        source_group(\"_Source Files\" FILES ${SOURCE_FILES})\n"
"        source_group(\"Ui Files\" FILES ${FORM_FILES})\n"
"        source_group(\"Translation Files\" FILES ${TS_FILES})\n"
"      endif()\n"
"      source_group(\"Resource\" FILES ${RESOURCE_FILES})\n"
"#######################################################################################################################\n"
"      set(PCH_NAME \"stdafx.h\")\n"
"      if(EXISTS \"${PRIVATE_HEADER_DIR}/${PCH_NAME}\")\n"
"        set(PCH_HEADER_FILE \"${PRIVATE_HEADER_DIR}/stdafx.h\")\n"
"        set(PCH_SOURCE_FILE \"${PRIVATE_HEADER_DIR}/stdafx.cpp\")\n"
"      endif()\n"
"      if(MSVC_IDE)\n"
"        #在VS中重定相关变量\n"
"        if(${CMAKE_VERSION} VERSION_GREATER 3.8 OR ${CMAKE_VERSION} VERSION_EQUAL 3.8)\n"
"          #set_property(TARGET ${CURRENT_TARGET} PROPERTY VS_GLOBAL_OutputPath \"${CMAKE_CURRENT_BINARY_DIR}\")#设置VS中$(OutputPath)的值\n"
"          #set_property(TARGET ${CURRENT_TARGET} PROPERTY VS_DEBUGGER_WORKING_DIRECTORY \"$ENV{${CMAKE_PROJECT_NAME}}/bin\")#设置VS调试工作目录为$(OutputPath)\n"
"          if(${CMAKE_VERSION} VERSION_GREATER 3.13 OR ${CMAKE_VERSION} VERSION_EQUAL 3.13)\n"
"            #set_property(TARGET ${CURRENT_TARGET} PROPERTY VS_GLOBAL_PATH \"${QT_BINARY_DIR};${CMAKE_INSTALL_PREFIX}/lib/${CRT_VERSION_NAME}_${PLATFORM};$ENV{PATH}\")#设置VS中$(PATH)的值\n"
"            #set_property(TARGET ${CURRENT_TARGET} PROPERTY VS_DEBUGGER_ENVIRONMENT \"PATH=$(PATH)\")#设置VS调试环境为$(PATH)\n"
"          endif()\n"
"        endif()\n"
"        #预编译头处理\n"
"        if(PCH_HEADER_FILE)\n"
"          set(PCH_DIR \"${CMAKE_CURRENT_BINARY_DIR}/pch/${CMAKE_CFG_INTDIR}\")\n"
"          file(MAKE_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/pch\")\n"
"          target_compile_options(${CURRENT_TARGET} PRIVATE \"/Yu${PCH_NAME};/FI${PCH_NAME};/Fp${PCH_DIR}/${PCH_NAME}.pch\")\n"
"          set_property(SOURCE \"${PCH_SOURCE_FILE}\" PROPERTY COMPILE_FLAGS \"/Yc${PCH_NAME}\")\n"
"          if(${CMAKE_VERSION} VERSION_GREATER 3.15 OR ${CMAKE_VERSION} VERSION_EQUAL 3.15)\n"
"            set_directory_properties(PROPERTIES ADDITIONAL_CLEAN_FILES \"${PCH_DIR}/${PCH_NAME}.pch\")\n"
"          else()\n"
"            set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES \"${PCH_DIR}/${PCH_NAME}.pch\")\n"
"          endif()\n"
"        endif()\n"
"      else()\n"
"        #预编译头处理\n"
"        if(PCH_HEADER_FILE)\n"
"          target_compile_options(${CURRENT_TARGET} PRIVATE \"-include${PCH_NAME}\")#强制包含预编译头文件\n"
"        endif()\n"
"      endif()\n"
"#########################################################################################################################\n"
"      target_include_directories(${CURRENT_TARGET} PRIVATE \"${CMAKE_CURRENT_BINARY_DIR}\")#包含当前源目录\n"
"      target_include_directories(${CURRENT_TARGET} PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}\")#包含当前构建目录\n"
"#########################################################################################################################\n"
"      set_property(TARGET ${CURRENT_TARGET} PROPERTY VS_GLOBAL_${CMAKE_PROJECT_NAME} \"${CMAKE_INSTALL_PREFIX}\")#\n"
"#########################################################################################################################\n"
"      if(EXISTS \"${PUBLIC_HEADER_DIR}/${CURRENT_SOURCE_FOLDER}\")\n"
"        target_include_directories(${CURRENT_TARGET} PRIVATE \"${PUBLIC_HEADER_DIR}/${CURRENT_SOURCE_FOLDER}\")\n"
"      endif()\n"
"      target_include_directories(${CURRENT_TARGET} PUBLIC \"${PUBLIC_HEADER_DIR}\")\n"
"      if(NOT ${PRIVATE_HEADER_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})\n"
"        target_include_directories(${CURRENT_TARGET} PRIVATE \"${PRIVATE_HEADER_DIR}\")\n"
"      endif()\n"
"#########################################################################################################################\n"
"      configureQtModules()#处理Qt依赖\n"
"      configureThirdPartyList()#处理三方库依赖\n"
"      configureHuaruLicense()#配置Huaru授权信息\n"
"#########################################################################################################################\n"
"    elseif(CSHARP_SOURCE_FILES)#CSharp\n"
"      target_sources(${CURRENT_TARGET} PRIVATE \"${CSHARP_SOURCE_FILES}\")\n"
"    endif()\n"
"#########################################################################################################################\n"
"    if(${CURRENT_TARGET_TYPE} STREQUAL \"STATIC_LIBRARY\")#静态库\n"
"      target_compile_definitions(${CURRENT_TARGET} PUBLIC \"USE_${CURRENT_SOURCE_FOLDER}_STATIC;\")\n"
"      if(${CMAKE_CURRENT_SOURCE_DIR} MATCHES \"${PROJECT_SOURCE_DIR}/Libraries\")\n"
"        if(NOT ${PUBLIC_HEADER_DIR} STREQUAL \"${PARENT_DIRECTORY}\")\n"
"          install(DIRECTORY \"${PUBLIC_HEADER_DIR}/${CURRENT_SOURCE_FOLDER}\" DESTINATION \"include\")\n"
"          install(TARGETS ${CURRENT_TARGET} ARCHIVE DESTINATION \"lib/${CRT_VERSION_NAME}_${PLATFORM}/static\")#静态库安装目录\n"
"        endif()\n"
"      endif()\n"
"    else()\n"
"      if(${CURRENT_TARGET_TYPE} STREQUAL \"MODULE_LIBRARY\")#插件库\n"
"        target_compile_definitions(${CURRENT_TARGET} PRIVATE \"${CURRENT_SOURCE_FOLDER}_EXPORTS;\")\n"
"        if(${CMAKE_CURRENT_SOURCE_DIR} MATCHES \"${PROJECT_SOURCE_DIR}/Plugins\")\n"
"          string(REGEX REPLACE \"${PROJECT_SOURCE_DIR}/Plugins\" \"plugins\" PLUGIN_INSTALL_PATH ${PARENT_DIRECTORY})\n"
"          install(TARGETS ${CURRENT_TARGET} RUNTIME DESTINATION \"${PLUGIN_INSTALL_PATH}\" LIBRARY DESTINATION \"${PLUGIN_INSTALL_PATH}\")#插件库安装目录\n"
"        endif()\n"
"      else()\n"
"        if(${CURRENT_TARGET_TYPE} STREQUAL \"EXECUTABLE\")#可执行程序\n"
"          #记录程序基础名称\n"
"          target_compile_definitions(${CURRENT_TARGET} PRIVATE \"PROGRAM_BASE_NAME=\\\"${CURRENT_TARGET}\\\"\")\n"
"          set_property(TARGET ${CURRENT_TARGET} PROPERTY DEBUG_POSTFIX \"d\")#设置可执行程序(调试版本)后缀\n"
"          #GUI程序设置程序入口、获取UAC权限\n"
"          if(MSVC_IDE AND DEFINED USE_GUI)\n"
"            set_property(TARGET ${CURRENT_TARGET} APPEND_STRING PROPERTY LINK_FLAGS \" /SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup /level='requireAdministrator'\")#GUI程序配置\n"
"          endif()\n"
"          if(${CMAKE_CURRENT_SOURCE_DIR} MATCHES \"${PROJECT_SOURCE_DIR}/Applications\")\n"
"            if(NOT ${PUBLIC_HEADER_DIR} STREQUAL \"${PARENT_DIRECTORY}\")#插件化的工具,直接暴露接口定义\n"
"              target_include_directories(${CURRENT_TARGET} SYSTEM INTERFACE \"${PUBLIC_HEADER_DIR}\")\n"
"              install(DIRECTORY \"${PUBLIC_HEADER_DIR}/${CURRENT_SOURCE_FOLDER}\" DESTINATION \"include\")\n"
"            endif()\n"
"            install(TARGETS ${CURRENT_TARGET} RUNTIME DESTINATION \"bin\")#可执行程序安装目录\n"
"          elseif(${CMAKE_CURRENT_SOURCE_DIR} MATCHES \"${PROJECT_SOURCE_DIR}/Tools\")\n"
"            install(TARGETS ${CURRENT_TARGET} RUNTIME DESTINATION \"tools\")#可执行程序(工具)安装目录\n"
"          endif()\n"
"        elseif(${CURRENT_TARGET_TYPE} STREQUAL \"SHARED_LIBRARY\")#动态库\n"
"          target_compile_definitions(${CURRENT_TARGET} PRIVATE \"${CURRENT_SOURCE_FOLDER}_EXPORTS;\")\n"
"          if(${CMAKE_CURRENT_SOURCE_DIR} MATCHES \"${PROJECT_SOURCE_DIR}/Libraries\")\n"
"            if(NOT ${PUBLIC_HEADER_DIR} STREQUAL \"${PARENT_DIRECTORY}\")#二次开发库(公开)\n"
"              install(DIRECTORY \"${PUBLIC_HEADER_DIR}/${CURRENT_SOURCE_FOLDER}\" DESTINATION \"include\")\n"
"            endif()\n"
"            install(TARGETS ${CURRENT_TARGET} RUNTIME DESTINATION \"bin\" LIBRARY DESTINATION \"bin\" ARCHIVE DESTINATION \"lib/${CRT_VERSION_NAME}_${PLATFORM}\")#普通动态库(非插件&&仅运行)安装目录\n"
"          endif()\n"
"        endif()\n"
"      endif()\n"
"      if(MSVC_IDE)\n"
"        #install(FILES $<TARGET_PDB_FILE:${CURRENT_TARGET}> DESTINATION \"pdb\" OPTIONAL)#将pdb文件放入安装目录用于调试\n"
"      endif()\n"
"    endif()\n"
"    #为C/C++库添加编译版本信息\n"
"    set_property(TARGET ${CURRENT_TARGET} PROPERTY OUTPUT_NAME \"${CURRENT_TARGET}$<$<AND:$<OR:$<STREQUAL:\\\"$<TARGET_PROPERTY:${CURRENT_TARGET},LINKER_LANGUAGE>\\\",\\\"C\\\">,$<STREQUAL:\\\"$<TARGET_PROPERTY:${CURRENT_TARGET},LINKER_LANGUAGE>\\\",\\\"CXX\\\">>,$<NOT:$<STREQUAL:\\\"${CURRENT_TARGET_TYPE}\\\",\\\"EXECUTABLE\\\">>>:${DEFAULT_VERSION_INFORMATION}>\")\n"
"#########################################################################################################################\n"
"  elseif(PYTHON_SOURCE_FILES)#\n"
"    #Python代码保持原始目录结构\n"
"    foreach(CURRENT_SOURCE_CODE_FILE_PATH ${PYTHON_SOURCE_FILES})\n"
"      get_filename_component(CURRENT_SOURCE_CODE_DIRECTORY ${CURRENT_SOURCE_CODE_FILE_PATH} DIRECTORY)#获取当前文件目录\n"
"      string(REPLACE \"${CMAKE_CURRENT_SOURCE_DIR}\" \"\" CURRENT_SOURCE_CODE_FILE_GROUP \"${CURRENT_SOURCE_CODE_DIRECTORY}\")\n"
"      file(TO_NATIVE_PATH \"${CURRENT_SOURCE_CODE_FILE_GROUP}\" \"CURRENT_SOURCE_CODE_FILE_GROUP\")\n"
"      source_group(\"${CURRENT_SOURCE_CODE_FILE_GROUP}\" FILES \"${CURRENT_SOURCE_CODE_FILE_PATH}\")\n"
"    endforeach()\n"
"  endif()\n"
"  message(\"\")\n"
"endmacro()\n"
"\n"
"#指定生成C/C++可执行程序\n"
"macro(generateExecutableProgram)\n"
"  prepareTarget()#文件归集\n"
"  add_executable(${CURRENT_TARGET})#生成C/C++可执行程序\n"
"  configureTarget()#配置目标项目\n"
"endmacro()\n"
"\n"
"#指定生成常规动态链接库\n"
"macro(generateDynamicLibrary)\n"
"  prepareTarget()#文件归集\n"
"  add_library(${CURRENT_TARGET} SHARED)#生成动态库\n"
"  configureTarget()#配置目标项目\n"
"endmacro()\n"
"\n"
"#指定生成静态链接库\n"
"macro(generateStaticLibrary)\n"
"  prepareTarget()#文件归集\n"
"  add_library(${CURRENT_TARGET} STATIC)#生成静态库\n"
"  configureTarget()#配置目标项目\n"
"endmacro()\n"
"\n"
"#指定生成插件动态链接库\n"
"macro(generatePluginLibrary)\n"
"  prepareTarget()#文件归集\n"
"  add_library(${CURRENT_TARGET} MODULE)#生成插件库\n"
"  configureTarget()#配置目标项目\n"
"endmacro()\n"
"\n"
"#指定生成Java\n"
"macro(generateJavaPackage)\n"
" if(Java_FOUND)\n"
"    prepareTarget()#文件归集\n"
"    add_jar(${CURRENT_TARGET} SOURCES \"${JAVA_SOURCE_FILES}\" ENTRY_POINT \"${JAVA_ENTRY_POINT}\")#生成Jar包\n"
"    configureTarget()#配置目标项目\n"
"  else()\n"
"    message(FATAL_ERROR \"Module[\\\"Java\\\"] not found\")\n"
"  endif()\n"
"endmacro()\n"
"\n"
"#指定生成CSharp可执行程序\n"
"macro(generateCSharpProgram)\n"
"  if(${CMAKE_VERSION} VERSION_GREATER 3.8.2 OR ${CMAKE_VERSION} VERSION_EQUAL 3.8.2)\n"
"    prepareTarget()#文件归集\n"
"    add_executable(${CURRENT_TARGET})#生成CSharp可执行程序\n"
"    configureTarget()#配置目标项目\n"
"  else()\n"
"    message(FATAL_ERROR \"CURRENT CMAKE_VERSION: (${CMAKE_VERSION}) VERSION_REQUIRED: (3.8.2) OR HIGHER FOR CSHARP PROJECT\")\n"
"  endif()\n"
"endmacro()\n"
"\n"
"#指定生成CSharp库\n"
"macro(generateCSharpLibrary)\n"
"  if(${CMAKE_VERSION} VERSION_GREATER 3.8.2 OR ${CMAKE_VERSION} VERSION_EQUAL 3.8.2)\n"
"    prepareTarget()#文件归集\n"
"    add_library(${CURRENT_TARGET} SHARED)#生成CSharp动态库\n"
"    configureTarget()#配置目标项目\n"
"  else()\n"
"    message(FATAL_ERROR \"CURRENT CMAKE_VERSION: (${CMAKE_VERSION}) VERSION_REQUIRED: (3.8.2) OR HIGHER FOR CSHARP PROJECT\")\n"
"  endif()\n"
"endmacro()\n"
"\n"
"#指定生成Python可执行程序\n"
"macro(generatePythonProgram)\n"
"  prepareTarget()#文件归集\n"
"  add_custom_target(${CURRENT_TARGET} SOURCES \"${PYTHON_SOURCE_FILES}\")#组织Python源代码\n"
"  configureTarget()#配置目标项目\n"
"endmacro()\n"
"\n"
"#指定生成常规Python动态链接库\n"
"macro(generatePythonLibrary)\n"
"  generateDynamicLibrary()\n"
"  set_property(TARGET ${CURRENT_TARGET} PROPERTY RUNTIME_OUTPUT_NAME \"${CURRENT_TARGET}\")#\n"
"  set_property(TARGET ${CURRENT_TARGET} PROPERTY SUFFIX \".pyd\")#\n"
"endmacro()\n"
"";

const char* TEMPLATE_PROJECT_TARGET_GROUP_CMAKE_CONFIGURATION =
"#add_subdirectory(\"\")#\n"
"";

const char* TEMPLATE_PROJECT_CMAKE_CONFIGURATION =
"cmake_minimum_required(VERSION \"3.8.2\")\n"
"\n"
"project(\"##BLOCK_PROJECT_NAME##\" DESCRIPTION \"##BLOCK_PROJECT_DESCRIPTION##\" VERSION \"##BLOCK_PROJECT_VERSION##\")\n"
"\n"
"include(\"${PROJECT_SOURCE_DIR}/module.cmake\")\n"
"";

#endif // !__TEMPLATE_PROJECT_H__
